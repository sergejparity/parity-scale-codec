name: Rust CI/CD

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '*'
  workflow_dispatch:

  # schedule:
  #   - cron: '0 0 * * *'

jobs:
# Check
  check-clippy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code/.
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Clippy
        run: |
          rustup component add clippy --toolchain stable-x86_64-unknown-linux-gnu
          cargo +stable clippy --locked -- -Dwarnings
          cargo +stable clippy --locked -p parity-scale-codec-derive -- -Dwarnings
          cargo +stable clippy --locked --test clippy -- -Dwarnings

  check-rust-stable-no_derive_no_std:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: Check Rust Stable (no_derive_no_std)
        run: time cargo +stable check --verbose --no-default-features --features bit-vec,bytes,generic-array

  check-rust-stable-no_std-chain-error:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: Check Rust Stable (no_std-chain-error)
        run: |
          export RUSTFLAGS='-Cdebug-assertions=y -Dwarnings'
          time cargo +stable check --verbose --no-default-features --features chain-error

  check-rust-stable-no_derive:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: check-rust-stable-no_derive
        run: |
          export RUSTFLAGS='-Cdebug-assertions=y -Dwarnings'
          time cargo +stable check --verbose --features bit-vec,bytes,generic-array

  check-rust-stable-only_mel:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: check-rust-stable-only_mel
        run: |
          export RUSTFLAGS='-Cdebug-assertions=y -Dwarnings'
          time cargo +stable check --verbose --features max-encoded-len

# Test
  test-rust-stable:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: Test Rust Stable
        run: |
          export RUSTFLAGS='-Cdebug-assertions=y -Dwarnings'
          time cargo +stable test --verbose --all --features bit-vec,bytes,generic-array,derive,max-encoded-len


  test-rust-stable-no_derive:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: Test Rust Stable (no_derive)
        run: |
          export RUSTFLAGS='-Cdebug-assertions=y -Dwarnings'
          time cargo +stable test --verbose --no-default-features --features bit-vec,bytes,generic-array


  test-rust-stable-only_mel:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: Test Rust Stable (only_mel)
        run: |
          export RUSTFLAGS='-Cdebug-assertions=y -Dwarnings'
          time cargo +stable test --verbose --features max-encoded-len

  test-rust-stable-only_mel-no_default_std:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: Test Rust Stable (only_mel-no_default_std)
        run: |
          export RUSTFLAGS='-Cdebug-assertions=y -Dwarnings'
          time cargo +stable test --verbose --no-default-features --features max-encoded-len


  bench-rust-nightly:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: Bench Rust Nightly
        run: |
          export RUSTFLAGS='-Cdebug-assertions=y -Dwarnings'
          time cargo +nightly bench --features bit-vec,bytes,generic-array,derive,max-encoded-len

  miri:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Miri
        run: |
          export RUST_BACKTRACE=1
          export RUSTFLAGS='-Cdebug-assertions=y -Dwarnings'
          export MIRIFLAGS='-Zmiri-disable-isolation'
          time cargo +nightly miri test --features bit-vec,bytes,generic-array,arbitrary --release

# Build

  build-linux-ubuntu-amd64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: Build for Linux (Ubuntu, AMD64)
        run: cargo build --verbose --release --features bit-vec,bytes,generic-array,derive

  publish-dry-run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: Dry Run Publish
        if: github.event_name == 'pull_request'
        run: cargo publish -p parity-scale-codec --dry-run


  # publish-crate:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal

  #     - name: Cache Rust dependencies
  #       uses: swatinem/rust-cache@v2
  #       with:
  #         key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}

  #     - name: Publish Crate
  #       if: startsWith(github.ref, 'refs/tags/v')
  #       run: cargo publish -p parity-scale-codec


